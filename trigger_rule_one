from airflow import DAG
from airflow.operators.empty import EmptyOperator
from airflow.operators.python import PythonOperator
from airflow.utils.dates import days_ago
from airflow.utils.trigger_rule import TriggerRule

def fail_task():
    raise Exception("Intentional Failure")

default_args = {
    'owner': 'airflow',
    'start_date': days_ago(1),
}

with DAG(
    'example_dag',
    default_args=default_args,
    schedule_interval=None,
    catchup=False,
) as dag:

    task_1 = EmptyOperator(
        task_id='task_1'
    )

    task_2 = PythonOperator(
        task_id='task_2',
        python_callable=fail_task
    )

    task_3 = EmptyOperator(
        task_id='task_3'
    )

    task_4 = EmptyOperator(
        task_id='task_4'
    )

    task_5 = EmptyOperator(
        task_id='task_5',
        trigger_rule=TriggerRule.ONE_FAILED
    )

    task_6 = EmptyOperator(
        task_id='task_6'
    )

    # Define task dependencies
    task_1 >> task_3
    task_2 >> task_4
    task_3 >> task_4  # task_4 will run after task_3 completes
    [task_3, task_4] >> task_5
